#------------------------------------------------------------------------------
#  *** 基本终终端操作 ***
#  tmux new -s "session_name"       // 创建一个seesion
#  tmux new -s "session_name" -d    // 创建一个seesion, 并在后台运行
#  tmux ls                          // 列出tmux会话列表
#  tmux attach -t session           // 进入指定的会话（可终端共享）
#  tmux kill-session -t "session"   // 删除指定会话
#
#  ** 容易混淆 **
#  bind-key ;   // switch to last pane
#  bind-key l   // switch to last window
#  bind-key L   // switch to last session
#  bind-key C-l // switch to last pane(like: bind-key ;)
#
#  *** 控制台-操作说明 ***
#  Ctrl+b  // 激活控制台
#  ** 系统操作
#      ?   // 列出所有快捷键；按q返回
#      d   // 脱离当前会话；
#      D   // 选择要脱离的会话；在同时开启了多个会话时使用
#      Ctrl+z  // 挂起当前会话
#      r   // 强制重绘未脱离的会话
#      s   // 选择并切换会话；在同时开启了多个会话时使用
#      :   // 进入命令行模式；
#               :new-session         // 创建新会话
#      [   // 进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出
#      ]   // 进入粘贴模式;
#      ~   // 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息
#
#  ** 会话操作
#      (   preview session
#      )   next session
#      L   last session
#      s   list session
#      $   rename seesion
#
#  ** 窗口操作
#      c   // 创建新窗口
#      &   // 关闭当前窗口
#      [0-9] // 切换至指定窗口
#      p   // 切换至上一窗口
#      n   // 切换至下一窗口
#      l   // 在前后两个窗口间互相切换
#      w   // 通过窗口列表切换窗口
#      ,   // 重命名当前窗口；这样便于识别
#      .   // 修改当前窗口编号；相当于窗口重新排序
#      f   // 在所有窗口中查找指定文本
#      i   // 显示tmux当前信息
#
#  ** 面板操作
#      ”   // 将当前面板平分为上下两块|横向切割 --> 分割成面板
#      %   // 将当前面板平分为左右两块|竖向切割 --> 分割成面板
#      x   // 关闭当前面板
#      ;   // 切换到最后的pane
#      !   // 将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板
#      Ctrl+方向键  // 以1个单元格为单位移动边缘以调整当前面板大小
#      Alt+方向键   // 以5个单元格为单位移动边缘以调整当前面板大小
#      Space        // 在预置的面板布局中循环切换;依次包括:
#                       even-horizontal、
#                       even-vertical、
#                       main-horizontal、
#                       main-vertical、
#                       tiled
#      q   // 显示面板编号
#      o   // 在当前窗口中选择下一面板
#      {   // 向前置换当前面板
#      }   // 向后置换当前面板
#      方向键   // 移动光标以选择面板
#      Alt+o    // 逆时针旋转当前窗口的面板
#      Ctrl+o   // 顺时针旋转当前窗口的面板
#------------------------------------------------------------------------------

# shell
set-option -g default-shell /bin/zsh
# set-option -g default-shell /bin/bash

# status bar support utf8
# set-option -g status-utf8 on

# C-b is not acceptable -- Vim uses it
set-option -g prefix C-a

# history
set-option -g history-limit 4096

# Start numbering at 1
set -g base-index 1

# 设置窗口可自动调整index
set -g renumber-windows on

# 设置窗口名字不能修改
# set-option -g allow-rename off

# 设置启动窗口时默认名字
# bind-key c new-window -n 'zsh'

# Allows for faster key repetition
set -s escape-time 0

# color
set -g default-terminal "screen-256color"

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# default status bar colors
set -g status-fg white
set -g status-bg default
set -g status-attr bright
set -g status-interval 1
set -g status-justify left
set -g status-left-length 20
set -g status-right-length 140
set -g status-left '#[fg=green]#H #[fg=black]• #[fg=green,bright]#(uname -r | cut -c 1-6)#[default]'
set -g status-right '#[fg=green,bg=black,bright]#(tmux-mem-cpu-load 1) #[fg=red,dim]#(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") #[fg=white]%a%l:%M:%S %p#[default] #[fg=blue]%Y-%m-%d'

# default pane title colors
set -g pane-border-fg green
set -g pane-border-bg black
set -g pane-active-border-fg white
set -g pane-active-border-bg yellow

# default window title colors
set-window-option -g window-status-fg white
set-window-option -g window-status-bg default
set-window-option -g window-status-attr dim

# active window title colors
set-window-option -g window-status-current-fg white
set-window-option -g window-status-current-bg default
set-window-option -g window-status-current-attr bright

# Highlight active window
set-window-option -g window-status-current-bg red

# auto window rename
set-window-option -g automatic-rename

# Vi copypaste mode
set-window-option -g mode-keys vi

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on


bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection

# Allows us to use C-a a <command> to send commands to a TMUX session inside
# another TMUX session
bind-key a send-prefix

# switch window panes
bind-key C-a last-window
bind-key C-l last-pane

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

#urxvt tab like window switching (-n: no prior escape seq)
##ruxvt标签式窗口切换
#bind -n S-down new-window
#bind -n S-left prev
#bind -n S-right next
#bind -n C-left swap-window -t -1
#bind -n C-right swap-window -t +1

# 复制和粘贴模式的快捷键
bind y copy-mode
bind c-y copy-mode
bind p paste-buffer
bind c-p paste-buffer

# Toggle log to file
# bind H pipe-pane -o 'cat >>$HOME/#W-tmux.log' '\;' display-message 'Toggled logging to $HOME/#W-tmux.log'
#
# bind h pipe-pane \; display-message 'Ended logging to $HOME/#W-tmux.log'

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

run-shell "powerline-daemon -q"
source ".powerline.conf"

